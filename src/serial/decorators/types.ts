import SerialSymbol from '../SerialSymbol';
import { Serialized } from '../types';

/**
 * The interface to fulfill to qualify as a Value Object.
 */
export interface ValueObject {
	/**
	 * Determins the equality of objects when serializing and deserializing objects.
	 *
	 * True if 'this' and the 'other' object which is being serialized or deserialized are equal.
	 * It is critical for the optimization of these processes.
	 */
	equals(other: unknown): boolean;

	/**
	 * Computes and returns the hashed identity for this Serializable.
	 *
	 * The `hashCode` of a Serializable is used to determine potential equality,
	 * and is used when serializing and deserializaing.
	 *
	 *
	 * Note: hashCode() MUST return a Uint32 number. The easiest way to
	 * guarantee this is to return `myHash | 0` from a custom implementation.
	 *
	 * If two values have the same `hashCode`, they are [not guaranteed
	 * to be equal][Hash Collision]. If two values have different `hashCode`s,
	 * they must not be equal.
	 *
	 * [Hash Collision]: https://en.wikipedia.org/wiki/Collision_(computer_science)
	 */
	hashCode(): number;
}

export type SerialMeta = {
	rid: string; // registryId
	cln: string; // classname
	hsh?: string; // generated by object-hash
};

export interface SerializableCollection {}
